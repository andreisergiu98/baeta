"use strict";(self.webpackChunk_baeta_website=self.webpackChunk_baeta_website||[]).push([["6153"],{24917:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>c,default:()=>u,toc:()=>l,metadata:()=>s,assets:()=>a,contentTitle:()=>d});var s=JSON.parse('{"id":"api/cli/ink/variables/useInput","title":"useInput()","description":"const useInput: (inputHandler, options?) => void","source":"@site/docs/api/cli/ink/variables/useInput.md","sourceDirName":"api/cli/ink/variables","slug":"/api/cli/ink/variables/useInput","permalink":"/docs/api/cli/ink/variables/useInput","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"useFocusManager","permalink":"/docs/api/cli/ink/variables/useFocusManager"},"next":{"title":"useStderr","permalink":"/docs/api/cli/ink/variables/useStderr"}}'),r=t(92669),i=t(51846);let c={},d="useInput()",a={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2}];function o(e){let n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"useinput",children:"useInput()"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"const"})," ",(0,r.jsx)(n.strong,{children:"useInput"}),": (",(0,r.jsx)(n.code,{children:"inputHandler"}),", ",(0,r.jsx)(n.code,{children:"options?"}),") => ",(0,r.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This hook is used for handling user input.\nIt's a more convenient alternative to using ",(0,r.jsx)(n.code,{children:"StdinContext"})," and listening to ",(0,r.jsx)(n.code,{children:"data"})," events.\nThe callback you pass to ",(0,r.jsx)(n.code,{children:"useInput"})," is called for each character when user enters any input.\nHowever, if user pastes text and it's more than one character, the callback will be called only once and the whole string will be passed as ",(0,r.jsx)(n.code,{children:"input"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import {useInput} from 'ink';\n\nconst UserInput = () => {\n  useInput((input, key) => {\n    if (input === 'q') {\n      // Exit program\n    }\n\n    if (key.leftArrow) {\n      // Left arrow key pressed\n    }\n  });\n\n  return \u2026\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"inputHandler"})}),"\n"]}),(0,r.jsxs)(n.td,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Handler"})}),"\n"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"options?"})}),"\n"]}),(0,r.jsxs)(n.td,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Options"})}),"\n"]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},51846:function(e,n,t){t.d(n,{Z:()=>d,a:()=>c});var s=t(60650);let r={},i=s.createContext(r);function c(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);