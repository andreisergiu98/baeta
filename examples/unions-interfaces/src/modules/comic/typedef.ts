/* This file was generated by Baeta. Do not edit it directly. All changes will be overwritten by the generator. */
/* eslint-disable */
/* @biome-ignore-all: generated file */

import type { DocumentNode, GraphQLScalarType } from "graphql";
import * as Baeta from "@baeta/core/sdk";
import extensions from "../extensions.ts";
import type {Ctx, Info} from "../types.ts";
import * as Types from "../../__generated__/types.ts";

const moduleMetadata = {
  id: 'comic',
  dirname: './comic',
  typedef: {"kind":"Document","definitions":[{"kind":"InterfaceTypeDefinition","name":{"kind":"Name","value":"Readable","loc":{"start":10,"end":18}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"id","loc":{"start":22,"end":24}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID","loc":{"start":26,"end":28}},"loc":{"start":26,"end":28}},"loc":{"start":26,"end":29}},"directives":[],"loc":{"start":22,"end":29}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"pages","loc":{"start":31,"end":36}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int","loc":{"start":38,"end":41}},"loc":{"start":38,"end":41}},"loc":{"start":38,"end":42}},"directives":[],"loc":{"start":31,"end":42}}],"loc":{"start":0,"end":44}},{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"Comic","loc":{"start":51,"end":56}},"interfaces":[{"kind":"NamedType","name":{"kind":"Name","value":"Readable","loc":{"start":68,"end":76}},"loc":{"start":68,"end":76}}],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"id","loc":{"start":80,"end":82}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID","loc":{"start":84,"end":86}},"loc":{"start":84,"end":86}},"loc":{"start":84,"end":87}},"directives":[],"loc":{"start":80,"end":87}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"title","loc":{"start":89,"end":94}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":96,"end":102}},"loc":{"start":96,"end":102}},"loc":{"start":96,"end":103}},"directives":[],"loc":{"start":89,"end":103}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"year","loc":{"start":105,"end":109}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int","loc":{"start":111,"end":114}},"loc":{"start":111,"end":114}},"loc":{"start":111,"end":115}},"directives":[],"loc":{"start":105,"end":115}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"artist","loc":{"start":117,"end":123}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":125,"end":131}},"loc":{"start":125,"end":131}},"loc":{"start":125,"end":132}},"directives":[],"loc":{"start":117,"end":132}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"pages","loc":{"start":134,"end":139}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int","loc":{"start":141,"end":144}},"loc":{"start":141,"end":144}},"loc":{"start":141,"end":145}},"directives":[],"loc":{"start":134,"end":145}}],"loc":{"start":46,"end":147}},{"kind":"UnionTypeExtension","name":{"kind":"Name","value":"Media","loc":{"start":162,"end":167}},"directives":[],"types":[{"kind":"NamedType","name":{"kind":"Name","value":"Comic","loc":{"start":170,"end":175}},"loc":{"start":170,"end":175}}],"loc":{"start":149,"end":175}}]} as unknown as DocumentNode
}

interface BaetaModuleTypes {
  Builders: {
    Comic: Baeta.TypeMethods<Types.Comic, Ctx, Info, BaetaModuleObjectTypeFields['Comic']['Builder'], BaetaModuleObjectTypeFields['Comic']['Factory']>
  };
  Factories: {
    Comic: Baeta.TypeCompilerFactory<Types.Comic, Ctx, Info, BaetaModuleObjectTypeFields['Comic']['Factory']>
  };
};

interface BaetaModuleObjectTypeFields {
  Comic: {
    Builder: {
      id: Baeta.FieldMethods<Types.Scalars["ID"], Types.Comic, Ctx, {}, Info>
      title: Baeta.FieldMethods<Types.Scalars["String"], Types.Comic, Ctx, {}, Info>
      year: Baeta.FieldMethods<Types.Scalars["Int"], Types.Comic, Ctx, {}, Info>
      artist: Baeta.FieldMethods<Types.Scalars["String"], Types.Comic, Ctx, {}, Info>
      pages: Baeta.FieldMethods<Types.Scalars["Int"], Types.Comic, Ctx, {}, Info>
    };
    Factory: {
      id: Baeta.Field<Types.Scalars["ID"], Types.Scalars["ID"], Types.Comic, Ctx, {}, Info>
      title: Baeta.Field<Types.Scalars["String"], Types.Scalars["String"], Types.Comic, Ctx, {}, Info>
      year: Baeta.Field<Types.Scalars["Int"], Types.Scalars["Int"], Types.Comic, Ctx, {}, Info>
      artist: Baeta.Field<Types.Scalars["String"], Types.Scalars["String"], Types.Comic, Ctx, {}, Info>
      pages: Baeta.Field<Types.Scalars["Int"], Types.Scalars["Int"], Types.Comic, Ctx, {}, Info>
    };
  };
};

export const ComicModule = Baeta.createModuleBuilder<Ctx, Info, BaetaModuleTypes['Builders'], BaetaModuleTypes['Factories']>(moduleMetadata.id, moduleMetadata.typedef, {
  Comic: Baeta.createTypeBuilder("Comic", {
    id: Baeta.createFieldBuilder("Comic", "id", extensions),
    title: Baeta.createFieldBuilder("Comic", "title", extensions),
    year: Baeta.createFieldBuilder("Comic", "year", extensions),
    artist: Baeta.createFieldBuilder("Comic", "artist", extensions),
    pages: Baeta.createFieldBuilder("Comic", "pages", extensions)
  }, extensions)
}, {
  Readable: { __resolveType: (source: {__typename: string}) => { return source.__typename; }}
}, extensions);