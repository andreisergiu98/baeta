/* This file was generated by Baeta. Do not edit it directly. All changes will be overwritten by the generator. */
/* eslint-disable */
/* @biome-ignore-all: generated file */

import type { DocumentNode, GraphQLScalarType } from "graphql";
import * as Baeta from "@baeta/core/sdk";
import extensions from "../extensions.ts";
import type {Ctx, Info} from "../types.ts";
import * as Types from "../../__generated__/types.ts";

const moduleMetadata = {
  id: 'user',
  dirname: './user',
  typedef: {"kind":"Document","definitions":[{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"User","loc":{"start":5,"end":9}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"id","loc":{"start":13,"end":15}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID","loc":{"start":17,"end":19}},"loc":{"start":17,"end":19}},"loc":{"start":17,"end":20}},"directives":[],"loc":{"start":13,"end":20}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"email","loc":{"start":22,"end":27}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":29,"end":35}},"loc":{"start":29,"end":35}},"loc":{"start":29,"end":36}},"directives":[],"loc":{"start":22,"end":36}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"lastName","loc":{"start":38,"end":46}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":48,"end":54}},"loc":{"start":48,"end":54}},"loc":{"start":48,"end":55}},"directives":[],"loc":{"start":38,"end":55}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"profile","loc":{"start":57,"end":64}},"arguments":[],"type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":66,"end":72}},"loc":{"start":66,"end":72}},"directives":[],"loc":{"start":57,"end":72}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"givenName","loc":{"start":74,"end":83}},"arguments":[],"type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":85,"end":91}},"loc":{"start":85,"end":91}},"directives":[],"loc":{"start":74,"end":91}}],"loc":{"start":0,"end":93}},{"kind":"InputObjectTypeDefinition","name":{"kind":"Name","value":"UserWhereUniqueInput","loc":{"start":101,"end":121}},"directives":[],"fields":[{"kind":"InputValueDefinition","name":{"kind":"Name","value":"id","loc":{"start":125,"end":127}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID","loc":{"start":129,"end":131}},"loc":{"start":129,"end":131}},"loc":{"start":129,"end":132}},"directives":[],"loc":{"start":125,"end":132}}],"loc":{"start":95,"end":134}},{"kind":"InputObjectTypeDefinition","name":{"kind":"Name","value":"UserUpdateInput","loc":{"start":142,"end":157}},"directives":[],"fields":[{"kind":"InputValueDefinition","name":{"kind":"Name","value":"lastName","loc":{"start":161,"end":169}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":171,"end":177}},"loc":{"start":171,"end":177}},"directives":[],"loc":{"start":161,"end":177}},{"kind":"InputValueDefinition","name":{"kind":"Name","value":"profile","loc":{"start":179,"end":186}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":188,"end":194}},"loc":{"start":188,"end":194}},"directives":[],"loc":{"start":179,"end":194}},{"kind":"InputValueDefinition","name":{"kind":"Name","value":"givenName","loc":{"start":196,"end":205}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":207,"end":213}},"loc":{"start":207,"end":213}},"directives":[],"loc":{"start":196,"end":213}}],"loc":{"start":136,"end":215}},{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"Query","loc":{"start":222,"end":227}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"user","loc":{"start":231,"end":235}},"arguments":[{"kind":"InputValueDefinition","name":{"kind":"Name","value":"where","loc":{"start":236,"end":241}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserWhereUniqueInput","loc":{"start":243,"end":263}},"loc":{"start":243,"end":263}},"loc":{"start":243,"end":264}},"directives":[],"loc":{"start":236,"end":264}}],"type":{"kind":"NamedType","name":{"kind":"Name","value":"User","loc":{"start":267,"end":271}},"loc":{"start":267,"end":271}},"directives":[],"loc":{"start":231,"end":271}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"users","loc":{"start":273,"end":278}},"arguments":[],"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"User","loc":{"start":281,"end":285}},"loc":{"start":281,"end":285}},"loc":{"start":281,"end":286}},"loc":{"start":280,"end":287}},"directives":[],"loc":{"start":273,"end":287}}],"loc":{"start":217,"end":289}},{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"Mutation","loc":{"start":296,"end":304}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"updateUser","loc":{"start":308,"end":318}},"arguments":[{"kind":"InputValueDefinition","name":{"kind":"Name","value":"where","loc":{"start":319,"end":324}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserWhereUniqueInput","loc":{"start":326,"end":346}},"loc":{"start":326,"end":346}},"loc":{"start":326,"end":347}},"directives":[],"loc":{"start":319,"end":347}},{"kind":"InputValueDefinition","name":{"kind":"Name","value":"data","loc":{"start":349,"end":353}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserUpdateInput","loc":{"start":355,"end":370}},"loc":{"start":355,"end":370}},"loc":{"start":355,"end":371}},"directives":[],"loc":{"start":349,"end":371}}],"type":{"kind":"NamedType","name":{"kind":"Name","value":"User","loc":{"start":374,"end":378}},"loc":{"start":374,"end":378}},"directives":[],"loc":{"start":308,"end":378}}],"loc":{"start":291,"end":380}},{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"Subscription","loc":{"start":387,"end":399}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"userUpdated","loc":{"start":403,"end":414}},"arguments":[],"type":{"kind":"NamedType","name":{"kind":"Name","value":"User","loc":{"start":416,"end":420}},"loc":{"start":416,"end":420}},"directives":[],"loc":{"start":403,"end":420}}],"loc":{"start":382,"end":422}}]} as unknown as DocumentNode
}

interface BaetaModuleTypes {
  Builders: {
    User: Baeta.TypeMethods<Types.User, Ctx, Info, BaetaModuleObjectTypeFields['User']['Builder'], BaetaModuleObjectTypeFields['User']['Factory']>
    Query: Baeta.TypeMethods<{}, Ctx, Info, BaetaModuleObjectTypeFields['Query']['Builder'], BaetaModuleObjectTypeFields['Query']['Factory']>
    Mutation: Baeta.TypeMethods<{}, Ctx, Info, BaetaModuleObjectTypeFields['Mutation']['Builder'], BaetaModuleObjectTypeFields['Mutation']['Factory']>
    Subscription: Baeta.TypeMethods<{}, Ctx, Info, BaetaModuleObjectTypeFields['Subscription']['Builder'], BaetaModuleObjectTypeFields['Subscription']['Factory']>
  };
  Factories: {
    User: Baeta.TypeCompilerFactory<Types.User, Ctx, Info, BaetaModuleObjectTypeFields['User']['Factory']>
    Query: Baeta.TypeCompilerFactory<{}, Ctx, Info, BaetaModuleObjectTypeFields['Query']['Factory']>
    Mutation: Baeta.TypeCompilerFactory<{}, Ctx, Info, BaetaModuleObjectTypeFields['Mutation']['Factory']>
    Subscription: Baeta.TypeCompilerFactory<{}, Ctx, Info, BaetaModuleObjectTypeFields['Subscription']['Factory']>
  };
};

interface BaetaModuleObjectTypeFields {
  User: {
    Builder: {
      id: Baeta.FieldMethods<Types.Scalars["ID"], Types.User, Ctx, {}, Info>
      email: Baeta.FieldMethods<Types.Scalars["String"], Types.User, Ctx, {}, Info>
      lastName: Baeta.FieldMethods<Types.Scalars["String"], Types.User, Ctx, {}, Info>
      profile: Baeta.FieldMethods<Types.Scalars["String"] | null, Types.User, Ctx, {}, Info>
      givenName: Baeta.FieldMethods<Types.Scalars["String"] | null, Types.User, Ctx, {}, Info>
    };
    Factory: {
      id: Baeta.Field<Types.Scalars["ID"], Types.Scalars["ID"], Types.User, Ctx, {}, Info>
      email: Baeta.Field<Types.Scalars["String"], Types.Scalars["String"], Types.User, Ctx, {}, Info>
      lastName: Baeta.Field<Types.Scalars["String"], Types.Scalars["String"], Types.User, Ctx, {}, Info>
      profile: Baeta.Field<Types.Scalars["String"] | null, Types.Scalars["String"] | null, Types.User, Ctx, {}, Info>
      givenName: Baeta.Field<Types.Scalars["String"] | null, Types.Scalars["String"] | null, Types.User, Ctx, {}, Info>
    };
  };
  Query: {
    Builder: {
      user: Baeta.FieldMethods<Types.User | null, {}, Ctx, Types.QueryUserArgs, Info>
      users: Baeta.FieldMethods<Array<Types.User> | null, {}, Ctx, {}, Info>
    };
    Factory: {
      user: Baeta.Field<Types.User | null, Types.User | null, {}, Ctx, Types.QueryUserArgs, Info>
      users: Baeta.Field<Array<Types.User> | null, Array<Types.User> | null, {}, Ctx, {}, Info>
    };
  };
  Mutation: {
    Builder: {
      updateUser: Baeta.FieldMethods<Types.User | null, {}, Ctx, Types.MutationUpdateUserArgs, Info>
    };
    Factory: {
      updateUser: Baeta.Field<Types.User | null, Types.User | null, {}, Ctx, Types.MutationUpdateUserArgs, Info>
    };
  };
  Subscription: {
    Builder: {
      userUpdated: Baeta.SubscriptionMethods<Types.User | null, {}, Ctx, {}, Info>
    };
    Factory: {
      userUpdated: Baeta.SubscriptionField<Types.User | null, Types.User | null, {}, Ctx, {}, Info>
    };
  };
};

export const UserModule = Baeta.createModuleBuilder<Ctx, Info, BaetaModuleTypes['Builders'], BaetaModuleTypes['Factories']>(moduleMetadata.id, moduleMetadata.typedef, {
  User: Baeta.createTypeBuilder("User", {
    id: Baeta.createFieldBuilder("User", "id", extensions),
    email: Baeta.createFieldBuilder("User", "email", extensions),
    lastName: Baeta.createFieldBuilder("User", "lastName", extensions),
    profile: Baeta.createFieldBuilder("User", "profile", extensions),
    givenName: Baeta.createFieldBuilder("User", "givenName", extensions)
  }, extensions),
  Query: Baeta.createTypeBuilder("Query", {
    user: Baeta.createFieldBuilder("Query", "user", extensions),
    users: Baeta.createFieldBuilder("Query", "users", extensions)
  }, extensions),
  Mutation: Baeta.createTypeBuilder("Mutation", {
    updateUser: Baeta.createFieldBuilder("Mutation", "updateUser", extensions)
  }, extensions),
  Subscription: Baeta.createTypeBuilder("Subscription", {
    userUpdated: Baeta.createSubscriptionBuilder("userUpdated", extensions)
  }, extensions)
}, {

}, extensions);