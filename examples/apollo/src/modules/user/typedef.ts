/* This file was generated by baeta. Do not edit it directly. */

/* eslint-disable */
/* prettier-ignore */

import * as Types from "../../__generated__/types";
import { DocumentNode } from "graphql";
import * as Baeta from "@baeta/core/sdk";
interface DefinedFields {
  User: 'id' | 'name';
  Query: 'user';
};

export type User = Pick<Types.User, DefinedFields['User']>;
export type Query = Pick<Types.Query, DefinedFields['Query']>;

export type UserResolvers = Pick<Types.UserResolvers, DefinedFields['User'] | '__isTypeOf'>;
export type QueryResolvers = Pick<Types.QueryResolvers, DefinedFields['Query']>;

export interface Resolvers {
  User?: UserResolvers;
  Query?: QueryResolvers;
};

export namespace ModuleMetadata {
  export const id = 'user';
  export const dirname = './user';
  export const typedef = {"kind":"Document","definitions":[{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"User","loc":{"start":5,"end":9}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"id","loc":{"start":14,"end":16}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID","loc":{"start":18,"end":20}},"loc":{"start":18,"end":20}},"loc":{"start":18,"end":21}},"directives":[],"loc":{"start":14,"end":21}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"name","loc":{"start":24,"end":28}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":30,"end":36}},"loc":{"start":30,"end":36}},"loc":{"start":30,"end":37}},"directives":[],"loc":{"start":24,"end":37}}],"loc":{"start":0,"end":39}},{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"Query","loc":{"start":46,"end":51}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"user","loc":{"start":56,"end":60}},"arguments":[{"kind":"InputValueDefinition","name":{"kind":"Name","value":"id","loc":{"start":61,"end":63}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID","loc":{"start":65,"end":67}},"loc":{"start":65,"end":67}},"loc":{"start":65,"end":68}},"directives":[],"loc":{"start":61,"end":68}}],"type":{"kind":"NamedType","name":{"kind":"Name","value":"User","loc":{"start":71,"end":75}},"loc":{"start":71,"end":75}},"directives":[],"loc":{"start":56,"end":75}}],"loc":{"start":41,"end":77}}]} as unknown as DocumentNode;
  
  export function createManager(module: Baeta.ModuleBuilder) {
    return Baeta.aggregateBuilders(module, {} as Resolvers, {
      User: Baeta.aggregateResolvers(module, "User", {} as UserResolvers, {
        id: Baeta.createResolverBuilder<NonNullable<UserResolvers["id"]>>(module, "User", "id"),
        name: Baeta.createResolverBuilder<NonNullable<UserResolvers["name"]>>(module, "User", "name"),
      }),
      Query: Baeta.aggregateResolvers(module, "Query", {} as QueryResolvers, {
        user: Baeta.createResolverBuilder<NonNullable<QueryResolvers["user"]>>(module, "Query", "user"),
      }),
    });
  }
}

export const createUserModule = () => Baeta.createModuleManager(ModuleMetadata);
export const getUserModule = Baeta.createSingletonModule(createUserModule);
