/* This file was generated by Baeta. Do not edit it directly. All changes will be overwritten by the generator. */
/* eslint-disable */

import * as Types from "../../__generated__/types";
import type { DocumentNode } from "graphql";
import * as Baeta from "@baeta/core/sdk";


interface DefinedFields {
  Query: 'testIncrementDirective';
};

export type Query = Pick<Types.Query, DefinedFields['Query']>;

export namespace ModuleMetadata {
  export const id = 'custom-input-directive';
  export const dirname = './custom-input-directive';
  export const hashes = {"Query":{"hash":"hf5uaa","fieldsHashes":{"testIncrementDirective":"1es0thu"}}};
  export const typedef = {"kind":"Document","definitions":[{"kind":"DirectiveDefinition","name":{"kind":"Name","value":"increment","loc":{"start":11,"end":20}},"arguments":[{"kind":"InputValueDefinition","name":{"kind":"Name","value":"by","loc":{"start":21,"end":23}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int","loc":{"start":25,"end":28}},"loc":{"start":25,"end":28}},"loc":{"start":25,"end":29}},"directives":[],"loc":{"start":21,"end":29}}],"repeatable":false,"locations":[{"kind":"Name","value":"INPUT_FIELD_DEFINITION","loc":{"start":34,"end":56}},{"kind":"Name","value":"ARGUMENT_DEFINITION","loc":{"start":59,"end":78}}],"loc":{"start":0,"end":78}},{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"Query","loc":{"start":85,"end":90}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"testIncrementDirective","loc":{"start":94,"end":116}},"arguments":[{"kind":"InputValueDefinition","name":{"kind":"Name","value":"value","loc":{"start":117,"end":122}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int","loc":{"start":124,"end":127}},"loc":{"start":124,"end":127}},"loc":{"start":124,"end":128}},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"increment","loc":{"start":130,"end":139}},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"by","loc":{"start":140,"end":142}},"value":{"kind":"IntValue","value":"1","loc":{"start":144,"end":145}},"loc":{"start":140,"end":145}}],"loc":{"start":129,"end":146}}],"loc":{"start":117,"end":146}}],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int","loc":{"start":149,"end":152}},"loc":{"start":149,"end":152}},"loc":{"start":149,"end":153}},"directives":[],"loc":{"start":94,"end":153}}],"loc":{"start":80,"end":155}}]} as unknown as DocumentNode;
  
  export function createManager(module: Baeta.ModuleBuilder) {
    return {
      ...module.createModuleMethods<Types.ContextType>(),
      Query: {
        ...module.createTypeMethods<{ }, Types.ContextType>("Query"),
        testIncrementDirective: module.createResolverBuilder<Types.Scalars["Int"]["output"], { }, Types.ContextType, Types.QueryTestIncrementDirectiveArgs>("Query", "testIncrementDirective"),
      },
    };
  }
}

export const createCustomInputDirectiveModule = () => Baeta.createModuleManager(ModuleMetadata);
export const getCustomInputDirectiveModule = Baeta.createSingletonModule(createCustomInputDirectiveModule);
