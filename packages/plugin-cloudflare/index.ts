import { resolve } from 'node:path';
import { FileBlock, createPluginV1 } from '@baeta/generator-sdk';

export interface CloudflarePluginOptions {
	ws?: {
		enable?: boolean;
		databaseId?: string;
		databaseName?: string;
		databaseBinding?: string;
		databaseMigrationsPath?: string;
		wsConnectionsBinding?: string;
	};
	cache?: {
		enable?: boolean;
		baetaCacheBinding?: string;
	};
}

async function generateConfigForSubscriptions(options: CloudflarePluginOptions['ws']) {
	if (options?.enable === false) {
		return null;
	}

	const result = await import('@baeta/subscriptions-cloudflare/sdk').catch(() => {
		return null;
	});

	if (result === null) {
		return null;
	}

	const databaseMigrationsPath = options?.databaseMigrationsPath ?? './migrations/subscriptions';
	const { databaseMigrations, durableObjectsMigrations, wsConnectionClassName } = result;

	const databaseConfiguration: string[] = [
		'# Database configuration for Subscriptions',
		'[[d1_databases]]',
		`binding = "${options?.databaseBinding ?? 'SUBSCRIPTIONS'}"`,
		`database_name = "${options?.databaseName ?? 'SUBSCRIPTIONS'}"`,
		`migrations_dir = "${databaseMigrationsPath}"`,
	];

	if (options?.databaseId) {
		databaseConfiguration.push(`database_id = "${options?.databaseId}"`);
	}

	const durableObjectsConfiguration: string[] = [
		'# Durable objects bindings for Subscriptions',
		'[[durable_objects.bindings]]',
		`name = "${options?.wsConnectionsBinding ?? 'WS_CONNECTIONS'}"`,
		`class_name = "${wsConnectionClassName}"`,
	];

	const bindingMigrations: string[] = ['# Migrations for Subscriptions'];

	for (let i = 0; i < durableObjectsMigrations.length; i++) {
		const migration = durableObjectsMigrations[i];
		bindingMigrations.push('[[migrations]]');
		bindingMigrations.push(`tag = "${migration.tag}"`);
		bindingMigrations.push(...migration.content);
	}

	return {
		databaseMigrations,
		databaseMigrationsPath,
		bindingMigration: bindingMigrations.join('\n'),
		databaseConfiguration: databaseConfiguration.join('\n'),
		durableObjectsConfiguration: durableObjectsConfiguration.join('\n'),
	};
}

async function generateConfigForCache(options: CloudflarePluginOptions['cache']) {
	if (options?.enable === false) {
		return null;
	}

	const result = await import('@baeta/extension-cache-cloudflare/sdk').catch(() => {
		return null;
	});

	if (result === null) {
		return null;
	}

	const { durableObjectsMigrations, baetaCacheName } = result;

	const durableObjectsConfiguration: string[] = [
		'# Durable Objects configuration for Cache',
		'[[durable_objects.bindings]]',
		`name = "${options?.baetaCacheBinding ?? 'BAETA_CACHE'}"`,
		`class_name = "${baetaCacheName}"`,
	];

	const bindingMigrations: string[] = ['# Migrations for Cache'];

	for (let i = 0; i < durableObjectsMigrations.length; i++) {
		const migration = durableObjectsMigrations[i];
		bindingMigrations.push('[[migrations]]');
		bindingMigrations.push(`tag = "${migration.tag}"`);
		bindingMigrations.push(...migration.content);
	}

	return {
		bindingMigration: bindingMigrations.join('\n'),
		durableObjectsConfiguration: durableObjectsConfiguration.join('\n'),
	};
}

export function cloudflarePlugin(options?: CloudflarePluginOptions) {
	return createPluginV1({
		name: 'cloudflare-plugin',
		actionName: 'cloudflare plugin',
		generate: async (ctx, next) => {
			await next();

			const configStart = '# Generated by Baeta Cloudflare Plugin - Begin';
			const configEnd = '# Generated by Baeta Cloudflare Plugin - End';
			const configInnerItems: string[] = [];

			const subscriptionsConfig = await generateConfigForSubscriptions(options?.ws);
			const cacheConfig = await generateConfigForCache(options?.cache);

			if (!subscriptionsConfig && !cacheConfig) {
				return next();
			}

			const databaseConfigurations: string[] = [];
			const durableObjectsConfigurations: string[] = [];
			const bindingMigrations: string[] = [];

			if (subscriptionsConfig) {
				databaseConfigurations.push(subscriptionsConfig.databaseConfiguration);
				durableObjectsConfigurations.push(subscriptionsConfig.durableObjectsConfiguration);
				bindingMigrations.push(subscriptionsConfig.bindingMigration);
			}

			if (cacheConfig) {
				durableObjectsConfigurations.push(cacheConfig.durableObjectsConfiguration);
				bindingMigrations.push(cacheConfig.bindingMigration);
			}

			if (databaseConfigurations.length > 0) {
				configInnerItems.push(databaseConfigurations.join('\n\n'));
			}

			if (durableObjectsConfigurations.length > 0) {
				configInnerItems.push(durableObjectsConfigurations.join('\n\n'));
			}

			if (bindingMigrations.length > 0) {
				configInnerItems.push(bindingMigrations.join('\n\n'));
			}

			const configInner = `\n${configInnerItems.join('\n\n')}\n`;

			const file = new FileBlock(
				resolve(ctx.generatorOptions.cwd, 'wrangler.toml'),
				configInner,
				configStart,
				configEnd,
				'cloudflare',
			);

			ctx.fileManager.add(file);

			if (!subscriptionsConfig) {
				return next();
			}

			for (const migration of subscriptionsConfig.databaseMigrations) {
				ctx.fileManager.createAndAdd(
					resolve(
						ctx.generatorOptions.cwd,
						subscriptionsConfig.databaseMigrationsPath,
						`${migration.name}.sql`,
					),
					migration.sql,
					'cloudflare',
				);
			}

			return next();
		},
	});
}
