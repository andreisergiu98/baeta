"use strict";(self.webpackChunk_baeta_website=self.webpackChunk_baeta_website||[]).push([["3890"],{49758:function(e,i,t){t.r(i),t.d(i,{frontMatter:()=>a,default:()=>p,toc:()=>d,metadata:()=>r,assets:()=>c,contentTitle:()=>o});var r=JSON.parse('{"id":"guides/directives","title":"Directives","description":"Directives in Baeta allow you to modify the execution behavior of your GraphQL schema. They can be applied to various parts of your schema and provide a way to add metadata or transform data.","source":"@site/docs/guides/directives.mdx","sourceDirName":"guides","slug":"/guides/directives","permalink":"/docs/guides/directives","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":100,"frontMatter":{"sidebar_position":100},"sidebar":"defaultSidebar","previous":{"title":"Context Store","permalink":"/docs/guides/context-store"},"next":{"title":"Input Directives","permalink":"/docs/guides/input-directives"}}'),n=t(92669),s=t(51846);let a={sidebar_position:100},o="Directives",c={},d=[{value:"Defining a Directive",id:"defining-a-directive",level:2},{value:"Implementing Directive Logic",id:"implementing-directive-logic",level:2},{value:"Usage",id:"usage",level:2}];function l(e){let i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"directives",children:"Directives"})}),"\n",(0,n.jsx)(i.p,{children:"Directives in Baeta allow you to modify the execution behavior of your GraphQL schema. They can be applied to various parts of your schema and provide a way to add metadata or transform data."}),"\n",(0,n.jsx)(i.h2,{id:"defining-a-directive",children:"Defining a Directive"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"src/modules/directives/directives.gql"})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",children:"directive @upper on FIELD_DEFINITION\n\ntype NameWithUpper {\n  name: String! @upper\n}\n\ntype Query {\n  testUpperDirective(name: String!): NameWithUpper\n}\n"})}),"\n",(0,n.jsx)(i.h2,{id:"implementing-directive-logic",children:"Implementing Directive Logic"}),"\n",(0,n.jsxs)(i.p,{children:["To implement the directive's behavior, use the ",(0,n.jsx)(i.code,{children:"$directive"})," method:"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"src/modules/directives/directives.ts"})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:'import { MapperKind, getDirective, mapSchema } from "@graphql-tools/utils";\nimport { defaultFieldResolver } from "graphql";\nimport { getCustomNativeDirectiveModule } from "./typedef";\n\nconst { $directive, Query } = getCustomNativeDirectiveModule();\n\n$directive((schema) => {\n  return mapSchema(schema, {\n    // Executes once for each object field in the schema\n    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {\n      // Check whether this field has the specified directive\n      const upperDirective = getDirective(schema, fieldConfig, "upper")?.[0];\n\n      if (!upperDirective) {\n        return fieldConfig;\n      }\n\n      // Get this field\'s original resolver\n      const { resolve = defaultFieldResolver } = fieldConfig;\n\n      // Replace the original resolver with a function that *first* calls\n      // the original resolver, then converts its result to upper case\n      fieldConfig.resolve = async (source, args, context, info) => {\n        const result = await resolve(source, args, context, info);\n        if (typeof result === "string") {\n          return result.toUpperCase();\n        }\n        return result;\n      };\n      return fieldConfig;\n    },\n  });\n});\n\n// Implement the query resolver\nQuery.testUpperDirective(({ args }) => {\n  return {\n    name: args.name,\n  };\n});\n'})}),"\n",(0,n.jsxs)(i.p,{children:["This example creates an ",(0,n.jsx)(i.code,{children:"@upper"})," directive that converts string fields to uppercase. The directive is applied during schema creation and modifies the field's resolver to transform its output."]}),"\n",(0,n.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(i.p,{children:"When querying, the directive will automatically transform the result:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",children:'query {\n  testUpperDirective(name: "hello") {\n    name # Will return "HELLO"\n  }\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:["For more information on directives, see the ",(0,n.jsx)(i.a,{href:"https://graphql.org/learn/execution/#directives",children:"GraphQL documentation"})," and the ",(0,n.jsx)(i.a,{href:"https://github.com/andreisergiu98/baeta/tree/main/examples/directives",children:"Baeta directives example"}),"."]})]})}function p(e={}){let{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},51846:function(e,i,t){t.d(i,{Z:()=>o,a:()=>a});var r=t(60650);let n={},s=r.createContext(n);function a(e){let i=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);