import fs from 'node:fs/promises';
import { dirname, extname } from '@baeta/util-path';

/**
 * Options for generated files.
 */
export interface FileOptions {
	/**
	 * Disable generation notice at the beginning of the file.
	 * @defaultValue false
	 */
	disableGenerationNoticeHeader?: boolean;

	/**
	 * Disable eslint-disable comment at the beginning of the file.
	 * @defaultValue false
	 */
	disableEslintHeader?: boolean;

	/**
	 * Disable biome comment at the beginning of the file.
	 * @defaultValue false
	 */
	disableBiomeHeader?: boolean;

	/**
	 * Add custom header at the beginning of the file.
	 */
	addHeader?: (name: string, content: string, tag: string) => string;

	/**
	 * Edit the content of the file before writing it.
	 */
	transformContent?: (name: string, content: string, tag: string) => string | Promise<string>;
}

export class File {
	persisted = false;

	constructor(
		public filename: string,
		public content: string,
		public tag: string,
		private options?: FileOptions,
	) {}

	write = async () => {
		if (this.persisted) {
			return;
		}
		this.persisted = true;

		const dir = dirname(this.filename);
		await fs.mkdir(dir, { recursive: true });

		const content = await this.buildContent();

		return fs.writeFile(this.filename, content, 'utf-8');
	};

	unlink = async () => {
		this.persisted = false;
		return fs.unlink(this.filename);
	};

	protected async buildContent() {
		const content = this.buildHeader() + this.content;

		if (this.options?.transformContent) {
			return this.options.transformContent(this.filename, content, this.tag);
		}

		return content;
	}

	protected buildHeader() {
		const headerItems: string[] = [];

		if (this.options?.disableGenerationNoticeHeader !== true) {
			const comment = this.createComment(
				'This file was generated by Baeta. Do not edit it directly. All changes will be overwritten by the generator.',
			);
			headerItems.push(comment);
		}

		if (this.options?.disableEslintHeader !== true) {
			const comment = this.createComment('eslint-disable');
			headerItems.push(comment);
		}

		if (this.options?.disableBiomeHeader !== true) {
			const comment = this.createComment('@biome-ignore-all: generated file');
			headerItems.push(comment);
		}

		if (this.options?.addHeader) {
			const customHeader = this.options.addHeader(this.filename, this.content, this.tag);
			headerItems.push(customHeader);
		}

		if (headerItems.length === 0) {
			return '';
		}

		return `${headerItems.join('\n')}\n\n`;
	}

	protected createComment(comment: string) {
		const extension = extname(this.filename);

		if (['.gql', '.graphql'].includes(extension)) {
			return `# ${comment}`;
		}

		return `/* ${comment} */`;
	}
}
