"use strict";(self.webpackChunk_baeta_website=self.webpackChunk_baeta_website||[]).push([[895],{5810:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(3289);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,g=u["".concat(i,".").concat(m)]||u[m]||c[m]||o;return r?n.createElement(g,s(s({ref:t},d),{},{components:r})):n.createElement(g,s({ref:t},d))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1325:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>f,default:()=>O,frontMatter:()=>g,metadata:()=>y,toc:()=>v});var n=r(5810),a=Object.defineProperty,o=Object.defineProperties,s=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))i.call(t,r)&&d(e,r,t[r]);if(l)for(var r of l(t))p.call(t,r)&&d(e,r,t[r]);return e},c=(e,t)=>o(e,s(t)),m=(e,t)=>{var r={};for(var n in e)i.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&l)for(var n of l(e))t.indexOf(n)<0&&p.call(e,n)&&(r[n]=e[n]);return r};const g={sidebar_position:3,description:""},f="First modules",y={unversionedId:"getting-started/first-modules",id:"getting-started/first-modules",title:"First modules",description:"",source:"@site/docs/getting-started/first-modules.mdx",sourceDirName:"getting-started",slug:"/getting-started/first-modules",permalink:"/docs/getting-started/first-modules",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:""},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/getting-started/configuration"},next:{title:"Starting your app",permalink:"/docs/getting-started/starting-your-app"}},h={},v=[{value:"Create module schema",id:"create-module-schema",level:3},{value:"Generate types",id:"generate-types",level:3},{value:"Add resolver",id:"add-resolver",level:3},{value:"Create the application",id:"create-the-application",level:3},{value:"Extend modules",id:"extend-modules",level:3},{value:"Add a middleware",id:"add-a-middleware",level:3}],k={toc:v},b="wrapper";function O(e){var t=e,{components:r}=t,a=m(t,["components"]);return(0,n.kt)(b,c(u(u({},k),a),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",u({},{id:"first-modules"}),"First modules"),(0,n.kt)("p",null,"Baeta is designed as schema first and modular.\nEach module has its own schema definitions and resolvers."),(0,n.kt)("h3",u({},{id:"create-module-schema"}),"Create module schema"),(0,n.kt)("p",null,"A module can have multiple schema files.\nSo there are many ways to organize it, for example separate files for types, inputs and operations."),(0,n.kt)("p",null,"We'll start with a simple schema file ",(0,n.kt)("inlineCode",{parentName:"p"},"src/modules/user/user.gql"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-graphql"}),"type User {\n  id: ID!\n  name: String!\n}\n\ntype Query {\n  user(id: ID): User\n}\n")),(0,n.kt)("h3",u({},{id:"generate-types"}),"Generate types"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"yarn generate\n# or\nyarn baeta generate\n")),(0,n.kt)("p",null,"Now ",(0,n.kt)("inlineCode",{parentName:"p"},"src/modules/user/typedef.ts")," has been created.\nThis is an autogenerated file that contains the type definitions of the module."),(0,n.kt)("admonition",u({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"Baeta can watch for changes with the ",(0,n.kt)("inlineCode",{parentName:"p"},"--watch")," flag.")),(0,n.kt)("h3",u({},{id:"add-resolver"}),"Add resolver"),(0,n.kt)("p",null,"Now add a resolver for the ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," query field in ",(0,n.kt)("inlineCode",{parentName:"p"},"src/modules/user/resolvers.ts"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-typescript"}),"import { getUserModule } from './typedef';\n\nconst { Query } = getUserModule();\n\nQuery.user(async (params) => {\n  return {\n    id: params.args.id ?? 'id',\n    name: 'John Doe',\n  };\n});\n")),(0,n.kt)("p",null,"Export the module and register resolvers ",(0,n.kt)("inlineCode",{parentName:"p"},"src/modules/user/index.ts"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-typescript"}),"import './resolvers';\nimport { getUserModule } from './typedef';\n\nexport const userModule = getUserModule();\n")),(0,n.kt)("h3",u({},{id:"create-the-application"}),"Create the application"),(0,n.kt)("p",null,"Your first module is ready, time to use it.\nCreate the entry point ",(0,n.kt)("inlineCode",{parentName:"p"},"src/app.ts"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-typescript"}),"import { createApplication } from '@baeta/core';\nimport { userModule } from './modules/user';\n\nimport { createYoga } from 'graphql-yoga';\nimport { createServer } from 'node:http';\n\nconst baeta = createApplication({\n  modules: [userModule],\n});\n\nconst yoga = createYoga({\n  schema: baeta.schema,\n});\n\nconst server = createServer(yoga);\n\nserver.listen(4000, () => {\n  console.log('\ud83d\ude80 Server ready at http://localhost:4000/graphql');\n});\n")),(0,n.kt)("admonition",u({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"We are using graphql-yoga because it's very easy to setup, but baeta is compatible with all graphql servers.")),(0,n.kt)("h3",u({},{id:"extend-modules"}),"Extend modules"),(0,n.kt)("p",null,"A module can extend other modules by extending types."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"src/modules/user-photos/user-photos.gql")),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-graphql"}),"type UserPhoto {\n  id: ID!\n  url: String!\n}\n\nextend type User {\n  photos: [UserPhoto!]\n}\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"src/modules/user-photos/resolvers.ts")),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-typescript"}),"import { getUserPhotosModule } from './typedef';\n\nconst { User } = getUserPhotosModule();\n\nUser.photos(({ args, root, info, ctx }) => {\n  return [\n    {\n      id: '1',\n      url: 'https://baeta.io/img/logo.svg',\n    },\n  ];\n});\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"src/modules/user-photos/index.ts")),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-typescript"}),"import './resolvers';\nimport { getUserPhotosModule } from './typedef';\nexport const userPhotosModule = getUserPhotosModule();\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"src/app.ts")),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-typescript"}),"import { createApplication } from '@baeta/core';\nimport { userModule } from './modules/user';\nimport { userPhotosModule } from './modules/user-photos';\n\nconst baeta = createApplication({\n  modules: [userModule, userPhotosModule],\n});\n")),(0,n.kt)("h3",u({},{id:"add-a-middleware"}),"Add a middleware"))}O.isMDXComponent=!0}}]);