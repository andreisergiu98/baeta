/*! For license information please see d69252a4.1fb25aa2.js.LICENSE.txt */
"use strict";(self.webpackChunk_baeta_website=self.webpackChunk_baeta_website||[]).push([[3350],{7516:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>u,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"guides/subscriptions","title":"Subscriptions","description":"Baeta provides type-safe real-time functionality through GraphQL subscriptions.","source":"@site/docs/guides/subscriptions.mdx","sourceDirName":"guides","slug":"/guides/subscriptions","permalink":"/docs/guides/subscriptions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":70,"frontMatter":{"sidebar_position":70},"sidebar":"defaultSidebar","previous":{"title":"Error Handling","permalink":"/docs/guides/errors"},"next":{"title":"Interfaces & Unions","permalink":"/docs/guides/interfaces-unions"}}');var t=s(7250),i=s(589);const u={sidebar_position:70},o="Subscriptions",a={},p=[{value:"PubSub Setup",id:"pubsub-setup",level:2},{value:"Context Integration",id:"context-integration",level:2},{value:"Schema Definition",id:"schema-definition",level:2},{value:"Publishing Events",id:"publishing-events",level:2},{value:"Production Setup",id:"production-setup",level:2},{value:"Type Safety",id:"type-safety",level:2},{value:"Alternative Solutions",id:"alternative-solutions",level:2},{value:"graphql-yoga",id:"graphql-yoga",level:3}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"subscriptions",children:"Subscriptions"})}),"\n",(0,t.jsx)(n.p,{children:"Baeta provides type-safe real-time functionality through GraphQL subscriptions."}),"\n",(0,t.jsx)(n.h2,{id:"pubsub-setup",children:"PubSub Setup"}),"\n",(0,t.jsxs)(n.p,{children:["While you can use any PubSub implementation directly, Baeta offers a typed wrapper through ",(0,t.jsx)(n.code,{children:"@baeta/subscriptions-pubsub"})," for enhanced type safety:"]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"graphql-subscriptions"})," is for a single server instance. If you need to scale your application, consider using a more robust solution like ",(0,t.jsx)(n.code,{children:"graphql-redis-subscriptions"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// src/lib/pubsub.ts\nimport { createTypedPubSub } from "@baeta/subscriptions-pubsub";\nimport { PubSub } from "graphql-subscriptions";\nimport type { User } from "../__generated__/types";\n\nexport type PubSubMap = {\n  "user-created": string;\n  "user-updated": User;\n  [c: `user-updated-${string}`]: User; // Dynamic channel\n};\n\nexport const pubsub = createTypedPubSub<PubSub, PubSubMap>(new PubSub());\n// Or use PubSub directly without the wrapper\n// export const pubsub = new PubSub();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"context-integration",children:"Context Integration"}),"\n",(0,t.jsx)(n.p,{children:"Add PubSub to your context:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// src/types/context.ts\nimport type { TypedPubSub } from "@baeta/subscriptions-pubsub";\nimport type { PubSubMap } from "../lib/pubsub";\n\nexport type Context = {\n  pubsub: TypedPubSub<PubSubMap>;\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"schema-definition",children:"Schema Definition"}),"\n",(0,t.jsx)(n.p,{children:"Define your subscription types:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"# src/modules/user/user.gql\ntype Subscription {\n  userCreated: User!\n  userUpdated: User!\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Implementing Subscriptions"}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.p,{children:"The subscription API differs between versions:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"asyncIterator"})," for graphql-subscriptions v2.x"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"asyncIterableIterator"})," for graphql-subscriptions v3.x"]}),"\n"]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// src/modules/user/resolvers.ts\nimport { db } from "../../lib/db/prisma";\nimport { getUserModule } from "./typedef";\n\nconst { Subscription } = getUserModule();\n\n// Subscription with database lookup\nSubscription.userCreated({\n  subscribe(params) {\n    return params.ctx.pubsub.asyncIterableIterator("user-created");\n  },\n  resolve(params) {\n    return db.user.findFirstOrThrow({\n      where: { id: params.payload },\n    });\n  },\n});\n\n// Direct subscription\nSubscription.userUpdated({\n  subscribe({ ctx }) {\n    return ctx.pubsub.asyncIterableIterator("user-updated");\n  },\n  resolve({ payload }) {\n    return payload;\n  },\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"publishing-events",children:"Publishing Events"}),"\n",(0,t.jsx)(n.p,{children:"Publish events from your mutations or other resolvers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Publishing after user update\nMutation.updateUser.$use(async ({ ctx }, next) => {\n  const user = await next();\n  if (user) {\n    ctx.pubsub.publish("user-updated", user);\n  }\n  return user;\n});\n\n// Publishing after user creation\nMutation.createUser(async ({ args, ctx }) => {\n  const user = await ctx.db.user.create({\n    data: args.data,\n  });\n  ctx.pubsub.publish("user-created", user.id);\n  return user;\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"production-setup",children:"Production Setup"}),"\n",(0,t.jsx)(n.p,{children:"For production environments, consider using a multi-instance solution:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// src/lib/pubsub.ts\nimport { createTypedPubSub } from "@baeta/subscriptions-pubsub";\nimport { RedisPubSub } from "graphql-redis-subscriptions";\nimport * as Redis from "ioredis";\nimport type { PubSubMap } from "./types";\n\nconst options = {\n  host: REDIS_DOMAIN_NAME,\n  port: PORT_NUMBER,\n};\n\nconst redisPubSub = new RedisPubSub({\n  publisher: new Redis(options),\n  subscriber: new Redis(options),\n});\n\nexport const pubsub = createTypedPubSub<RedisPubSub, PubSubMap>(redisPubSub);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"type-safety",children:"Type Safety"}),"\n",(0,t.jsx)(n.p,{children:"The TypedPubSub wrapper ensures type safety for both publishing and subscribing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// TypeScript will error if channel or payload type doesn\'t match\nctx.pubsub.publish("user-updated", 123); // Error: payload should be User\nctx.pubsub.publish("invalid-channel", user); // Error: channel doesn\'t exist\n'})}),"\n",(0,t.jsx)(n.h2,{id:"alternative-solutions",children:"Alternative Solutions"}),"\n",(0,t.jsxs)(n.p,{children:["While this documentation uses ",(0,t.jsx)(n.code,{children:"graphql-subscriptions"}),", you can also use other PubSub implementations:"]}),"\n",(0,t.jsx)(n.h3,{id:"graphql-yoga",children:"graphql-yoga"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { createPubSub } from "graphql-yoga";\n\nexport type PubSubMap = {\n  "user-created": [string];\n  "user-updated": [User];\n};\n\nexport const pubsub = createPubSub<PubSubMap>();\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},2410:(e,n,s)=>{var r=s(7402),t=Symbol.for("react.element"),i=Symbol.for("react.fragment"),u=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,a={key:!0,ref:!0,__self:!0,__source:!0};function p(e,n,s){var r,i={},p=null,c=null;for(r in void 0!==s&&(p=""+s),void 0!==n.key&&(p=""+n.key),void 0!==n.ref&&(c=n.ref),n)u.call(n,r)&&!a.hasOwnProperty(r)&&(i[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===i[r]&&(i[r]=n[r]);return{$$typeof:t,type:e,key:p,ref:c,props:i,_owner:o.current}}n.Fragment=i,n.jsx=p,n.jsxs=p},7250:(e,n,s)=>{e.exports=s(2410)},589:(e,n,s)=>{s.d(n,{R:()=>u,x:()=>o});var r=s(7402);const t={},i=r.createContext(t);function u(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:u(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);