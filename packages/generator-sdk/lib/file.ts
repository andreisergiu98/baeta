import fs from 'fs/promises';
import { dirname, extname } from 'path';

export class File {
  persisted = false;

  constructor(public filename: string, public content: string, public tag: string) {}

  write = async () => {
    if (this.persisted) {
      return;
    }
    this.persisted = true;

    const dir = dirname(this.filename);
    await fs.mkdir(dir, { recursive: true });
    return fs.writeFile(this.filename, this.buildContent(), 'utf-8');
  };

  unlink = async () => {
    this.persisted = false;
    return fs.unlink(this.filename);
  };

  private buildContent() {
    return this.buildHeader() + this.content;
  }

  protected buildHeader() {
    const ext = extname(this.filename);

    const header = [
      this.createComment('This file was generated by baeta. Do not edit it directly.', ext) + '\n',
      this.createComment('eslint-disable', ext),
      this.createComment('prettier-ignore', ext),
    ].join('\n');
    return header + '\n\n';
  }

  protected createComment(comment: string, extension: string) {
    if (['.gql', '.graphql'].includes(extension)) {
      return `# ${comment}`;
    }

    return `/* ${comment} */`;
  }
}
