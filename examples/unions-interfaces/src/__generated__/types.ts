/* This file was generated by Baeta. Do not edit it directly. All changes will be overwritten by the generator. */
/* eslint-disable */

import type { Context as ContextType } from '../types/context';
export type Maybe<T> = T | null;
export type InputMaybe<T> = T | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type { ContextType }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

export type Readable = {
  id: Scalars['ID']['output'];
  pages: Scalars['Int']['output'];
};

export type Comic = Readable & {
  __typename?: 'Comic';
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  year: Scalars['Int']['output'];
  artist: Scalars['String']['output'];
  pages: Scalars['Int']['output'];
};

export type Media = Comic | Movie | TvShow | Book;

export type Movie = {
  __typename?: 'Movie';
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  year: Scalars['Int']['output'];
};

export type TvShow = {
  __typename?: 'TVShow';
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  year: Scalars['Int']['output'];
  seasons: Scalars['Int']['output'];
};

export type Book = Readable & {
  __typename?: 'Book';
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  year: Scalars['Int']['output'];
  author: Scalars['String']['output'];
  pages: Scalars['Int']['output'];
};

export type Query = {
  __typename?: 'Query';
  media: Array<Media>;
};


export type DefinedFieldsWithoutExtensions = {
  Comic: "id" | "title" | "year" | "artist" | "pages";
  Movie: "id" | "title" | "year";
  TVShow: "id" | "title" | "year" | "seasons";
  Book: "id" | "title" | "year" | "author" | "pages";
};

export type DefinedUnionsWithoutExtensions = {
  Media: Pick<Comic, DefinedFieldsWithoutExtensions["Comic"] | "__typename"> | Pick<Movie, DefinedFieldsWithoutExtensions["Movie"] | "__typename"> | Pick<TvShow, DefinedFieldsWithoutExtensions["TVShow"] | "__typename"> | Pick<Book, DefinedFieldsWithoutExtensions["Book"] | "__typename">;
};

export type DefinedUnionsResults = {
  Media: "Comic" | "Movie" | "TVShow" | "Book" | null;
};

export type DefinedInterfacesWithoutExtensions = {
  Readable: Pick<Comic, DefinedFieldsWithoutExtensions["Comic"] | "__typename"> | Pick<Book, DefinedFieldsWithoutExtensions["Book"] | "__typename">;
};

export type DefinedInterfacesResults = {
  Readable: "Comic" | "Book" | null;
};
