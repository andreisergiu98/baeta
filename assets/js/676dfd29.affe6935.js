"use strict";(self.webpackChunk_baeta_website=self.webpackChunk_baeta_website||[]).push([["2090"],{74829:function(e,i,t){t.r(i),t.d(i,{frontMatter:()=>c,default:()=>o,toc:()=>d,metadata:()=>n,assets:()=>a,contentTitle:()=>l});var n=JSON.parse('{"id":"guides/input-directives","title":"Input Directives","description":"While GraphQL doesn\'t natively support modifying query arguments and inputs through directives, Baeta provides a utility called Input Directives that enables this functionality.","source":"@site/docs/guides/input-directives.mdx","sourceDirName":"guides","slug":"/guides/input-directives","permalink":"/docs/guides/input-directives","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":110,"frontMatter":{"sidebar_position":110},"sidebar":"defaultSidebar","previous":{"title":"Directives","permalink":"/docs/guides/directives"},"next":{"title":"Typed PubSub","permalink":"/docs/guides/typed-pubsub"}}'),r=t(92669),s=t(51846);let c={sidebar_position:110},l="Input Directives",a={},d=[{value:"Target Types",id:"target-types",level:2},{value:"Defining Input Directives",id:"defining-input-directives",level:2},{value:"Implementing Input Directives",id:"implementing-input-directives",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Usage",id:"usage",level:2}];function u(e){let i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"input-directives",children:"Input Directives"})}),"\n",(0,r.jsx)(i.p,{children:"While GraphQL doesn't natively support modifying query arguments and inputs through directives, Baeta provides a utility called Input Directives that enables this functionality."}),"\n",(0,r.jsx)(i.h2,{id:"target-types",children:"Target Types"}),"\n",(0,r.jsx)(i.p,{children:"Input directives can target different types of inputs:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"scalar"}),": For primitive values like numbers, strings, etc."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"list"}),": For array values"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"object"}),": For complex object inputs"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"defining-input-directives",children:"Defining Input Directives"}),"\n",(0,r.jsx)(i.p,{children:"First, define your input directive in the schema:"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.code,{children:"src/modules/directives/input-directives.gql"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-graphql",children:"directive @increment(by: Int!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION\n\ntype Query {\n  testIncrementDirective(value: Int! @increment(by: 1)): Int!\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"implementing-input-directives",children:"Implementing Input Directives"}),"\n",(0,r.jsxs)(i.p,{children:["Use the ",(0,r.jsx)(i.code,{children:"createInputDirective"})," utility from ",(0,r.jsx)(i.code,{children:"@baeta/core"})," to implement the directive's behavior:"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.code,{children:"src/modules/directives/input-directives.ts"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-typescript",children:'import { createInputDirective } from "@baeta/core";\nimport type { Context } from "../../types/context";\nimport { getCustomInputDirectiveModule } from "./typedef";\n\nconst { $directive, Query } = getCustomInputDirectiveModule();\n\nconst incrementDirective = createInputDirective<{ by: number }, Context>({\n  name: "increment",\n  target: "scalar",\n  resolve: ({ directiveConfig, getValue, setValue }) => {\n    const value = getValue();\n    if (typeof value === "number") {\n      setValue(value + directiveConfig.by);\n    }\n  },\n});\n\n$directive(incrementDirective);\n\nQuery.testIncrementDirective(({ args }) => {\n  return args.value;\n});\n'})}),"\n",(0,r.jsx)(i.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsx)(i.p,{children:"The input directive processes the input value before it reaches the resolver:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"getValue()"})," retrieves the original input value."]}),"\n",(0,r.jsx)(i.li,{children:"The directive logic modifies the value."}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"setValue()"})," updates the input value."]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(i.p,{children:"When querying, the directive will modify the input before it reaches the resolver:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-graphql",children:"query {\n  testIncrementDirective(value: 5) {\n    # value will be incremented to 6 before reaching the resolver\n  }\n}\n"})}),"\n",(0,r.jsx)(i.p,{children:"This feature is particularly useful for input validation and data transformation."}),"\n",(0,r.jsxs)(i.p,{children:["For more examples and implementations, visit the ",(0,r.jsx)(i.a,{href:"https://github.com/andreisergiu98/baeta/tree/main/examples/directives",children:"Baeta directives examples"}),"."]})]})}function o(e={}){let{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},51846:function(e,i,t){t.d(i,{Z:()=>l,a:()=>c});var n=t(60650);let r={},s=n.createContext(r);function c(e){let i=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);