/*! For license information please see 853ac1f8.530b9289.js.LICENSE.txt */
"use strict";(self.webpackChunk_baeta_website=self.webpackChunk_baeta_website||[]).push([[2832],{9066:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/interfaces-unions","title":"Interfaces & Unions","description":"Baeta supports both GraphQL Interfaces and Unions. Interfaces allow you to define common fields that multiple types can share, while Unions let you combine different types into a single field.","source":"@site/docs/guides/interfaces-unions.mdx","sourceDirName":"guides","slug":"/guides/interfaces-unions","permalink":"/docs/guides/interfaces-unions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":80,"frontMatter":{"sidebar_position":80},"sidebar":"defaultSidebar","previous":{"title":"Subscriptions","permalink":"/docs/guides/subscriptions"},"next":{"title":"Context Store","permalink":"/docs/guides/context-store"}}');var r=i(7250),s=i(589);const o={sidebar_position:80},a="Interfaces & Unions",l={},d=[{value:"Interfaces",id:"interfaces",level:2},{value:"Defining an Interface",id:"defining-an-interface",level:3},{value:"Unions",id:"unions",level:2},{value:"Defining a Union",id:"defining-a-union",level:3},{value:"Extending Unions",id:"extending-unions",level:3},{value:"Type Resolution",id:"type-resolution",level:2},{value:"Resolvers",id:"resolvers",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"interfaces--unions",children:"Interfaces & Unions"})}),"\n",(0,r.jsx)(n.p,{children:"Baeta supports both GraphQL Interfaces and Unions. Interfaces allow you to define common fields that multiple types can share, while Unions let you combine different types into a single field."}),"\n",(0,r.jsxs)(n.p,{children:["For more detailed information about Interfaces and Unions, check out the ",(0,r.jsx)(n.a,{href:"https://graphql.org/learn/schema/#interfaces",children:"official GraphQL documentation"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsx)(n.p,{children:"Interfaces define a common set of fields that multiple types must implement."}),"\n",(0,r.jsx)(n.h3,{id:"defining-an-interface",children:"Defining an Interface"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"src/modules/comic/comic.gql"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"interface Readable {\n  id: ID!\n  pages: Int!\n}\n\ntype Comic implements Readable {\n  id: ID!\n  title: String!\n  year: Int!\n  artist: String!\n  pages: Int!\n}\n\ntype Book implements Readable {\n  id: ID!\n  title: String!\n  year: Int!\n  author: String!\n  pages: Int!\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"unions",children:"Unions"}),"\n",(0,r.jsx)(n.p,{children:"Unions allow you to combine multiple types into a single field, without requiring common fields."}),"\n",(0,r.jsx)(n.h3,{id:"defining-a-union",children:"Defining a Union"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"src/modules/media/media.gql"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"type Movie {\n  id: ID!\n  title: String!\n  year: Int!\n}\n\ntype TVShow {\n  id: ID!\n  title: String!\n  year: Int!\n  seasons: Int!\n}\n\nunion Media = Movie | TVShow | Book\n\ntype Query {\n  media: [Media!]!\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"extending-unions",children:"Extending Unions"}),"\n",(0,r.jsx)(n.p,{children:"You can extend existing unions to add more types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"extend union Media = Comic\n"})}),"\n",(0,r.jsx)(n.h2,{id:"type-resolution",children:"Type Resolution"}),"\n",(0,r.jsx)(n.p,{children:"Type resolution must be defined in the module where the union or interface is originally defined, regardless of where types implement or extend them:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { getMediaModule } from './typedef';\n\nconst { Media, Query } = getMediaModule();\n\nMedia.$resolveType(({ value }) => {\n  // If __typename is provided, we don't need to check further\n  if (value.__typename) {\n    return value.__typename;\n  }\n\n  // Check for distinctive fields\n  if ('author' in value) {\n    return 'Book';\n  }\n\n  if ('artist' in value) {\n    return 'Comic';\n  }\n\n  if ('seasons' in value) {\n    return 'TVShow';\n  }\n\n  return 'Movie';\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"resolvers",children:"Resolvers"}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of resolving a union field:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"Query.media(() => {\n  return [\n    {\n      id: '1',\n      title: 'The Book',\n      author: 'Jon Doe',\n      year: 2021,\n    },\n    {\n      id: '2',\n      title: 'The Movie',\n      year: 2022,\n    },\n    {\n      id: '3',\n      title: 'The TV Show',\n      year: 2023,\n      seasons: 1,\n    },\n    {\n      __typename: 'Movie',\n      id: '4',\n      title: 'Another Movie',\n      year: 2023,\n    },\n  ];\n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},2410:(e,n,i)=>{var t=i(7402),r=Symbol.for("react.element"),s=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,a=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function d(e,n,i){var t,s={},d=null,c=null;for(t in void 0!==i&&(d=""+i),void 0!==n.key&&(d=""+n.key),void 0!==n.ref&&(c=n.ref),n)o.call(n,t)&&!l.hasOwnProperty(t)&&(s[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===s[t]&&(s[t]=n[t]);return{$$typeof:r,type:e,key:d,ref:c,props:s,_owner:a.current}}n.Fragment=s,n.jsx=d,n.jsxs=d},7250:(e,n,i)=>{e.exports=i(2410)},589:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(7402);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);