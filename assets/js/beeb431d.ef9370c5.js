"use strict";(self.webpackChunk_baeta_website=self.webpackChunk_baeta_website||[]).push([["9845"],{16227:function(e,s,n){n.r(s),n.d(s,{frontMatter:()=>l,default:()=>u,toc:()=>o,metadata:()=>r,assets:()=>a,contentTitle:()=>d});var r=JSON.parse('{"id":"guides/resolvers","title":"Resolvers","description":"Baeta provides a modular, type-safe approach to defining GraphQL resolvers. Let\'s look at how to implement user resolvers.","source":"@site/docs/guides/resolvers.mdx","sourceDirName":"guides","slug":"/guides/resolvers","permalink":"/docs/guides/resolvers","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"defaultSidebar","previous":{"title":"Guides","permalink":"/docs/category/guides"},"next":{"title":"Scalars","permalink":"/docs/guides/scalars"}}'),t=n(92669),i=n(51846);let l={sidebar_position:10},d="Resolvers",a={},o=[{value:"Project Structure",id:"project-structure",level:2},{value:"Schema Definition",id:"schema-definition",level:2},{value:"Implement Resolvers",id:"implement-resolvers",level:2},{value:"Resolver Context",id:"resolver-context",level:2},{value:"Type Safety",id:"type-safety",level:2},{value:"Field Resolvers",id:"field-resolvers",level:2},{value:"Caveats",id:"caveats",level:2},{value:"Extending Types in a Separate Module",id:"extending-types-in-a-separate-module",level:3},{value:"Implementing Extended Resolvers",id:"implementing-extended-resolvers",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){let s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"resolvers",children:"Resolvers"})}),"\n",(0,t.jsx)(s.p,{children:"Baeta provides a modular, type-safe approach to defining GraphQL resolvers. Let's look at how to implement user resolvers."}),"\n",(0,t.jsx)(s.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"src/modules/\n\u2514\u2500\u2500 user/\n    \u251C\u2500\u2500 user.gql\n    \u251C\u2500\u2500 resolvers.ts\n    \u2514\u2500\u2500 typedef.ts\n"})}),"\n",(0,t.jsx)(s.h2,{id:"schema-definition",children:"Schema Definition"}),"\n",(0,t.jsxs)(s.p,{children:["First, define your types and queries in ",(0,t.jsx)(s.code,{children:"src/modules/user/user.gql"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-graphql",children:"type User {\n  id: ID!\n  email: String!\n  lastName: String!\n  profile: String\n  givenName: String\n}\n\ninput UserWhereUniqueInput {\n  id: ID!\n}\n\ntype Query {\n  user(where: UserWhereUniqueInput!): User\n  users: [User!]\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"implement-resolvers",children:"Implement Resolvers"}),"\n",(0,t.jsxs)(s.p,{children:["After defining your schema, implement the resolvers in ",(0,t.jsx)(s.code,{children:"src/modules/user/resolvers.ts"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'import { getUserModule } from "./typedef.ts";\nimport { UserDataSource } from "./datasource.ts";\n\nconst { Query } = getUserModule();\n\n// Single user resolver\nQuery.user(({ args, ctx }) => {\n  return ctx.dataSources.users.findUnique(args.where);\n});\n\n// Users list resolver\nQuery.users(({ ctx }) => {\n  return ctx.dataSources.users.findMany();\n});\n'})}),"\n",(0,t.jsx)(s.h2,{id:"resolver-context",children:"Resolver Context"}),"\n",(0,t.jsxs)(s.p,{children:["Resolvers receive the context object automatically that you define in the ",(0,t.jsx)(s.code,{children:"baeta.ts"})," config file as you can see ",(0,t.jsx)(s.a,{href:"/docs/guides/context",children:"Context"}),", which contains the data sources:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"interface Context {\n  dataSources: OrmDataSource;\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"type-safety",children:"Type Safety"}),"\n",(0,t.jsx)(s.p,{children:"Baeta provides full type safety for:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Arguments"}),"\n",(0,t.jsx)(s.li,{children:"Return types"}),"\n",(0,t.jsx)(s.li,{children:"Parent types"}),"\n",(0,t.jsx)(s.li,{children:"Context"}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"// TypeScript ensures type safety\nQuery.user(({ args, ctx }) => {\n  // args.where is typed as UserWhereUniqueInput\n  // return type must match User schema\n  return ctx.dataSources.users.findUnique(args.where);\n});\n"})}),"\n",(0,t.jsx)(s.h2,{id:"field-resolvers",children:"Field Resolvers"}),"\n",(0,t.jsx)(s.p,{children:"Baeta allows you to define resolvers for any field in your types, not just Query fields:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"const { User } = getUserModule();\n\nUser.email(({ root }) => {\n  return root.email.toLowerCase();\n});\n"})}),"\n",(0,t.jsx)(s.h2,{id:"caveats",children:"Caveats"}),"\n",(0,t.jsxs)(s.admonition,{type:"warning",children:[(0,t.jsxs)(s.p,{children:["When you define a required field in a type (like ",(0,t.jsx)(s.code,{children:"fullName: String!"}),"), that field must be resolved in all resolvers that return that type. In our example, because ",(0,t.jsx)(s.code,{children:"fullName"})," is marked as non-nullable (",(0,t.jsx)(s.code,{children:"String!"}),"), both ",(0,t.jsx)(s.code,{children:"Query.user"})," and ",(0,t.jsx)(s.code,{children:"Query.users"})," would need to include this field in their return data."]}),(0,t.jsxs)(s.p,{children:["To add computed required fields without modifying existing resolvers, create a separate module that extends the base type instead. If the field was optional (",(0,t.jsx)(s.code,{children:"String"})," instead of ",(0,t.jsx)(s.code,{children:"String!"}),"), this wouldn't be necessary."]})]}),"\n",(0,t.jsx)(s.h3,{id:"extending-types-in-a-separate-module",children:"Extending Types in a Separate Module"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"src/modules/user-extended/user-extended.gql"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-graphql",children:"extend type User {\n  fullName: String!\n  posts: [Post!]\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"implementing-extended-resolvers",children:"Implementing Extended Resolvers"}),"\n",(0,t.jsxs)(s.p,{children:["After defining your schema, implement the resolvers in their respective modules ",(0,t.jsx)(s.code,{children:"src/modules/user-extended/resolvers.ts"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'import { getUserExtendedModule } from "./typedef.ts";\n\nconst { User } = getUserExtendedModule();\n\nUser.fullName(({ root }) => {\n  return `${root.givenName} ${root.lastName}`;\n});\n\nUser.posts(({ root, ctx }) => {\n  return ctx.dataSources.posts.findMany({\n    where: { authorId: root.id },\n  });\n});\n'})}),"\n",(0,t.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Module Organization"}),"\n"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Keep related schema and resolvers together"}),"\n",(0,t.jsx)(s.li,{children:"Use meaningful file names"}),"\n",(0,t.jsx)(s.li,{children:"Follow consistent module structure"}),"\n"]}),"\n",(0,t.jsxs)(s.ol,{start:"2",children:["\n",(0,t.jsx)(s.li,{children:"Type Safety"}),"\n"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Leverage TypeScript's type system"}),"\n",(0,t.jsx)(s.li,{children:"Use generated types from schema"}),"\n",(0,t.jsx)(s.li,{children:"Enable strict type checking"}),"\n"]}),"\n",(0,t.jsxs)(s.ol,{start:"3",children:["\n",(0,t.jsx)(s.li,{children:"Error Handling"}),"\n"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["User appropriate ",(0,t.jsx)(s.a,{href:"/docs/guides/errors",children:"GraphQL errors"})]}),"\n",(0,t.jsx)(s.li,{children:"Provide meaningful error messages"}),"\n",(0,t.jsx)(s.li,{children:"Handle edge cases"}),"\n"]})]})}function u(e={}){let{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},51846:function(e,s,n){n.d(s,{Z:()=>d,a:()=>l});var r=n(60650);let t={},i=r.createContext(t);function l(e){let s=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);