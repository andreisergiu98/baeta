/* This file was generated by baeta. Do not edit it directly. */

/* eslint-disable */
/* prettier-ignore */

import * as Types from "../../__generated__/types";
import { DocumentNode } from "graphql";
import * as Baeta from "@baeta/core/sdk";
import baetaExtensions from "../../extensions";


interface DefinedFields {
  User: 'id' | 'name' | 'birthday';
  Query: 'user';
};

interface DefinedInputFields {
  UserWhereUnique: 'id' | 'email';
};

export type User = Pick<Types.User, DefinedFields['User']>;
export type DateTime = Types.DateTime;
export type UserWhereUnique = Pick<Types.UserWhereUnique, DefinedInputFields['UserWhereUnique']>;
export type Query = Pick<Types.Query, DefinedFields['Query']>;

export namespace ModuleMetadata {
  export const id = 'user';
  export const dirname = './user';
  export const typedef = {"kind":"Document","definitions":[{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"User","loc":{"start":5,"end":9}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"id","loc":{"start":14,"end":16}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID","loc":{"start":18,"end":20}},"loc":{"start":18,"end":20}},"loc":{"start":18,"end":21}},"directives":[],"loc":{"start":14,"end":21}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"name","loc":{"start":24,"end":28}},"arguments":[],"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":30,"end":36}},"loc":{"start":30,"end":36}},"loc":{"start":30,"end":37}},"directives":[],"loc":{"start":24,"end":37}},{"kind":"FieldDefinition","name":{"kind":"Name","value":"birthday","loc":{"start":40,"end":48}},"arguments":[],"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime","loc":{"start":50,"end":58}},"loc":{"start":50,"end":58}},"directives":[],"loc":{"start":40,"end":58}}],"loc":{"start":0,"end":60}},{"kind":"InputObjectTypeDefinition","name":{"kind":"Name","value":"UserWhereUnique","loc":{"start":69,"end":84}},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"constraints","loc":{"start":86,"end":97}},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"minFields","loc":{"start":98,"end":107}},"value":{"kind":"IntValue","value":"1","loc":{"start":109,"end":110}},"loc":{"start":98,"end":110}},{"kind":"Argument","name":{"kind":"Name","value":"maxFields","loc":{"start":112,"end":121}},"value":{"kind":"IntValue","value":"1","loc":{"start":123,"end":124}},"loc":{"start":112,"end":124}}],"loc":{"start":85,"end":125}}],"fields":[{"kind":"InputValueDefinition","name":{"kind":"Name","value":"id","loc":{"start":130,"end":132}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID","loc":{"start":134,"end":136}},"loc":{"start":134,"end":136}},"directives":[],"loc":{"start":130,"end":136}},{"kind":"InputValueDefinition","name":{"kind":"Name","value":"email","loc":{"start":139,"end":144}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String","loc":{"start":146,"end":152}},"loc":{"start":146,"end":152}},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"trim","loc":{"start":154,"end":158}},"arguments":[],"loc":{"start":153,"end":158}},{"kind":"Directive","name":{"kind":"Name","value":"lower","loc":{"start":160,"end":165}},"arguments":[],"loc":{"start":159,"end":165}},{"kind":"Directive","name":{"kind":"Name","value":"validString","loc":{"start":167,"end":178}},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"format","loc":{"start":179,"end":185}},"value":{"kind":"EnumValue","value":"EMAIL","loc":{"start":187,"end":192}},"loc":{"start":179,"end":192}}],"loc":{"start":166,"end":193}}],"loc":{"start":139,"end":193}}],"loc":{"start":63,"end":195}},{"kind":"ObjectTypeDefinition","name":{"kind":"Name","value":"Query","loc":{"start":202,"end":207}},"interfaces":[],"directives":[],"fields":[{"kind":"FieldDefinition","name":{"kind":"Name","value":"user","loc":{"start":212,"end":216}},"arguments":[{"kind":"InputValueDefinition","name":{"kind":"Name","value":"where","loc":{"start":217,"end":222}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"UserWhereUnique","loc":{"start":224,"end":239}},"loc":{"start":224,"end":239}},"directives":[],"loc":{"start":217,"end":239}}],"type":{"kind":"NamedType","name":{"kind":"Name","value":"User","loc":{"start":242,"end":246}},"loc":{"start":242,"end":246}},"directives":[],"loc":{"start":212,"end":246}}],"loc":{"start":197,"end":248}}]} as unknown as DocumentNode;
  
  export function createManager(module: Baeta.ModuleBuilder) {
    return {
      ...module.createModuleMethods<Types.ContextType>(),
      User: {
        ...module.createTypeMethods<User, Types.ContextType>("User"),
        id: module.createResolverBuilder<Types.Scalars["ID"], User, Types.ContextType, {}>("User", "id"),
        name: module.createResolverBuilder<Types.Scalars["String"], User, Types.ContextType, {}>("User", "name"),
        birthday: module.createResolverBuilder<Types.Maybe<DateTime>, User, Types.ContextType, {}>("User", "birthday"),
      },
      Query: {
        ...module.createTypeMethods<{}, Types.ContextType>("Query"),
        user: module.createResolverBuilder<Types.Maybe<User>, {}, Types.ContextType, Types.QueryUserArgs>("Query", "user"),
      },
    };
  }
}

export const createUserModule = () => Baeta.createModuleManager(ModuleMetadata, baetaExtensions);
export const getUserModule = Baeta.createSingletonModule(createUserModule);
